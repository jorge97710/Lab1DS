todo$clasificiacion <- ifelse(grepl("N",todo$CAUFIN),"14",todo$clasificiacion)
todo$clasificiacion <- ifelse(grepl("O",todo$CAUFIN),"15",todo$clasificiacion)
todo$clasificiacion <- ifelse(grepl("P",todo$CAUFIN),"16",todo$clasificiacion)
todo$clasificiacion <- ifelse(grepl("Q",todo$CAUFIN),"17",todo$clasificiacion)
todo$clasificiacion <- ifelse(grepl("R",todo$CAUFIN),"18",todo$clasificiacion)
todo$clasificiacion <- ifelse(grepl("S",todo$CAUFIN),"19",todo$clasificiacion)
todo$clasificiacion <- ifelse(grepl("T",todo$CAUFIN),"19",todo$clasificiacion)
todo$clasificiacion <- ifelse(grepl("V",todo$CAUFIN),"20",todo$clasificiacion)
todo$clasificiacion <- ifelse(grepl("Y",todo$CAUFIN),"20",todo$clasificiacion)
todo$clasificiacion <- ifelse(grepl("Z",todo$CAUFIN),"21",todo$clasificiacion)
todo$clasificiacion <- ifelse(grepl("U",todo$CAUFIN),"22",todo$clasificiacion)
any(is.na(todo$MES))
any(is.na(todo$clasificiacion))
todo$Temporada <- ifelse(grepl("4",todo$MES),"1","todo$Temporada")
todo$Temporada <- ifelse(grepl("5",todo$MES),"1",todo$Temporada)
todo$Temporada <- ifelse(grepl("6",todo$MES),"1",todo$Temporada)
todo$Temporada <- ifelse(grepl("7",todo$MES),"2",todo$Temporada)
todo$Temporada <- ifelse(grepl("8",todo$MES),"2",todo$Temporada)
todo$Temporada <- ifelse(grepl("9",todo$MES),"2",todo$Temporada)
todo$Temporada <- ifelse(grepl("10",todo$MES),"3",todo$Temporada)
todo$Temporada <- ifelse(grepl("11",todo$MES),"3",todo$Temporada)
todo$Temporada <- ifelse(grepl("12",todo$MES),"3",todo$Temporada)
todo$Temporada <- ifelse(grepl("1",todo$MES),"4",todo$Temporada)
todo$Temporada <- ifelse(grepl("2",todo$MES),"4",todo$Temporada)
todo$Temporada <- ifelse(grepl("3",todo$MES),"4",todo$Temporada)
any(is.na(todo$Temporada))
# Write CSV in R
write.csv(todo, file = "Proyecto.csv")
todo <- read.csv("estudioenfermedad.csv")
library(rpart)
library(caret)
library(tree)
library(rpart.plot)
library(randomForest)
library(MASS)
library(rpart)
library(caTools)
set.seed(123)
muestra <- sample(1:nrow(todo),0.7*nrow(todo))
train <- todo[muestra,] #70% entrenamiento
test<- todo[-muestra,] #30% prueba
install.packages("party")
library(rpart)
library(caret)
library(tree)
library(rpart.plot)
library(randomForest)
library(MASS)
library(rpart)
library(caTools)
library(party)
library(party)
library(rpart)
library(caret)
library(tree)
library(rpart.plot)
library(randomForest)
library(MASS)
library(rpart)
library(caTools)
library(party)
# Create the input data frame.
input.dat <- todo
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
nativeSpeaker ~ age + shoeSize + score,
data = input.dat)
# Create the input data frame.
input.dat <- todo
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
clasificiacion ~ AÑO + MES + SEXO + GRUPETNICO + EDAD + PERIODOEDA  + Temporada,
data = input.dat)
# Plot the tree.
plot(output.tree)
gc()
# Create the input data frame.
input.dat <- todo
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
clasificiacion ~ AÑO + MES + SEXO + GRUPETNICO + EDAD + PERIODOEDA  + Temporada,
data = input.dat)
# Plot the tree.
plot(output.tree)
gc()
gc()
gc()
gc()
gc()
gc()
Create the input data frame.
input.dat <- todo
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
clasificiacion ~ AÑO + MES + SEXO + GRUPETNICO + EDAD + PERIODOEDA  + Temporada,
data = input.dat)
# Plot the tree.
plot(output.tree)
# Create the input data frame.
input.dat <- todo
gc()
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
clasificiacion ~ AÑO + MES + SEXO + GRUPETNICO + EDAD + PERIODOEDA  + Temporada,
data = input.dat)
gc()
head(todo)
todo <- todo[,-1]
head(todo)
todo <- todo[,-1]
todo <- todo[,-1]
head(todo)
head(todo)
todo <- todo[,-9]
head(todo)
scaleddata<-scale(todo)
scaleddata
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize
maxmindf <- as.data.frame(lapply(todo, normalize))
maxmindf
1830054*.7
# Training and Test Data
trainset <- maxmindf[1:1281038, ]
testset <- maxmindf[1281039:1830054, ]
library(neuralnet)
nn <- neuralnet(Clasifiacion ~Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn <- neuralnet(clasifiacion ~Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn <- neuralnet(clasificiacion ~Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn$result.matrix
plot(nn)
#Test the resulting output
temp_test <- subset(testset, select = c("Temporada"))
head(temp_test)
nn.results <- compute(nn, temp_test)
results <- data.frame(actual = testset$clasificiacion, prediction = nn.results$net.result)
nn.results
roundedresults<-sapply(results,round,digits=0)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
table(actual,prediction)
roundedresults<-sapply(results,round,digits=3)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
attach(roundedresultsdf)
table(actual,prediction)
predicted=results$prediction * abs(diff(range(clasificiacion))) + min(clasificiacion)
roundedresults<-sapply(results,round,digits=4)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
#Test the resulting output
temp_test <- subset(testset, select = c("Temporada"))
head(temp_test)
temp_test
nn.results <- compute(nn, temp_test)
nn.results
results <- data.frame(actual = testset$clasificiacion, prediction = nn.results$net.result)
results
nn <- neuralnet(clasificiacion ~AÑO + MES + SEXO + GRUPETNICO + EDAD + PERIODOEDA  + Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
# Read the Data
data = read.csv("estudioenfermedad.csv", header=T)
# Random sampling
samplesize = 0.70 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
# Create training and test set
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
data<- data[-1,]
# Read the Data
data = read.csv("estudioenfermedad.csv", header=T)
data<- data[-1,]
data<- data[-1,]
data<- data[-1,]
# Read the Data
data = read.csv("estudioenfermedad.csv", header=T)
data<- data[,-1]
data<- data[,-1]
data<- data[,-1]
View(data)
data<- data[,-9]
samplesize = 0.70 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
# Create training and test set
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
scaled
# load library
library(neuralnet)
# creating training and test set
trainNN = scaled[index , ]
testNN = scaled[-index , ]
# fit neural network
set.seed(2)
NN = neuralnet(clasificiacion ~ AÑO+MES+SEXO+GRUPETNICO+EDAD+PERIODOEDA+Temporada, trainNN, hidden = 3 , linear.output = T )
NN = neuralnet(clasificiacion ~ AÑO+MES+SEXO+GRUPETNICO+EDAD+PERIODOEDA+Temporada, trainNN, hidden = 3 , linear.output = T,verbose=True)
NN = neuralnet(clasificiacion ~ Temporada, trainNN, hidden = 3 , linear.output = T)
# plot neural network
plot(NN)
NN = neuralnet(clasificiacion ~ AÑO+Temporada, trainNN, hidden = 3 , linear.output = T)
NN = neuralnet(clasificiacion ~ MES+Temporada, trainNN, hidden = 3 , linear.output = T)
# Random sampling
samplesize = 0.95 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
# Create training and test set
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
# creating training and test set
trainNN = scaled[index , ]
testNN = scaled[-index , ]
# fit neural network
set.seed(2)
NN = neuralnet(clasificiacion ~ MES+Temporada, testNN, hidden = 3 , linear.output = T)
todo <- read.csv("estudioenfermedad.csv")
cor(todo$clasificiacion,todo$Temporada,method="spearman")
plot(todo$Temporada,todo$clasificiacion)
prueba = lm(clasificiacion ~ Temporada, data=todo)
summary(prueba)
gc()
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
library(data.table)
mydat <- fread('http://www.stats.ox.ac.uk/pub/datasets/csb/ch11b.dat')
head(mydat)
mydat <- fread('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
install.packages("curl")
mydat <- fread('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
head(mydat)
library(data.table)
library(RCurl)
install.packages("RCurl")
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/
.csv', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/.csv', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
library(RCurl)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
read.table.url("https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/",skip=4,header=T)
install.packages(c("e1071", "factoextra", "fpc", "mclust", "NbClust"))
library(ggplot2)
library("psych")
library("ggplot2")
library("car")
library("Hmisc")
library("corrplot")
sample <- read.csv(file="sample_submission.csv", header=TRUE)
test <- read.csv(file="test.csv", header=TRUE)
train <- read.csv(file="train.csv", header=TRUE)
getwd()
setwd("C:/Users/jazmi/OneDrive/Documentos/Github/DataScience-Proyecto1")
sample <- read.csv(file="sample_submission.csv", header=TRUE)
test <- read.csv(file="test.csv", header=TRUE)
train <- read.csv(file="train.csv", header=TRUE)
sample <- read.csv(file="sample_submission.csv", header=TRUE)
setwd("C:/Users/jazmi/OneDrive/Documentos/Github/Lab1DS")
sample <- read.csv(file="sample_submission.csv", header=TRUE)
test <- read.csv(file="test.csv", header=TRUE)
train <- read.csv(file="train.csv", header=TRUE)
summary(train)
qplot(train$LotFrontage, geom="histogram")
qplot(train$LotFrontage, geom="histogram",main = "Histograma de Frontage")
qplot(train$BsmtFinSF1, geom="histogram",main = "Histograma de ft2 terminados del tipo uno ")
qplot(train$BsmtFinSF1, geom="histogram",main = "Histograma de Frontage")
qplot(train$LotFrontage, geom="histogram",main = "Histograma de distancia lineal de calle conectad a ala propiedad")
qplot(train$LotFrontage, geom="histogram",main = "Histograma de distancia lineal de calle conectada a la propiedad")
qplot(train$LotArea, geom="histogram",main = "Histograma de area en ft2 del lote")
qplot(train$YearBuilt, geom="histogram",main = "Histograma del año de construccion")
qplot(train$YearRemodAdd, geom="histogram",main = "Histograma del año de remodelacion ")
qplot(train$MasVnrArea, geom="histogram",main = "Histograma de area en ft2 del masonry veneer")
qplot(train$BsmtFinSF1, geom="histogram",main = "Histograma de ft2 terminados del tipo uno ")
qplot(train$MasVnrArea, geom="histogram",main = "Histograma de area en ft2 del masonry veneer")
qplot(train$BsmtFinSF1, geom="histogram",main = "Histograma de ft2 terminados del tipo uno ")
qplot(train$BsmtFinSF2, geom="histogram",main = "Histograma de ft2 terminados del tipo dos")
qplot(train$BsmtUnfSF, geom="histogram",main = "Histograma de area ft2 no terminada")
qplot(train$TotalBsmtSF, geom="histogram",main = "Histograma de area ft2 terminada")
qplot(train$BsmtFinSF1, geom="histogram")
qplot(train$X1stFlrSF, geom="histogram",main = "Histograma de area en ft2 del primer piso")
qplot(train$X2ndFlrSF, geom="histogram",main = "Histograma de area en ft2 del segundo piso")
qplot(train$GrLivArea, geom="histogram",main = "Histograma de area en ft2 de living area debajo de grada")
qplot(train$BsmtFullBath, geom="histogram",main = "Histograma de cantida de baños completos del sotano")
qplot(train$BsmtHalfBath, geom="histogram",main = "Histograma de cantidad de medios baños del sotano")
qplot(train$BedroomAbvGr, geom="histogram")
qplot(train$KitchenAbvGr, geom="histogram")
qplot(train$TotRmsAbvGrd, geom="histogram",main = "Histograma de cantidad de habitaciones debajo de grade")
qplot(train$Fireplaces, geom="histogram",main = "Histograma de cantidad de chimeneas")
qplot(train$GarageYrBlt, geom="histogram",main = "Histograma de año de fabricacion del garaje")
qplot(train$GarageCars, geom="histogram",main = "Histograma de carros que caben en el garaje")
qplot(train$GarageArea, geom="histogram",main = "Histograma de area en ft2 del garaje")
qplot(train$WoodDeckSF, geom="histogram",main = "Histograma de area en ft2 de piso de madera")
qplot(train$OpenPorchSF, geom="histogram",main = "Histograma de area en ft2 de portico abierto")
qplot(train$EnclosedPorch, geom="histogram",main = "Histograma de area en ft2 de portico encerrado")
qplot(train$X3SsnPorch, geom="histogram",main = "Histograma de area en ft2 de portico de 3 estaciones")
qplot(train$ScreenPorch, geom="histogram",main = "Histograma de area en ft2 de portico con pantalla")
qplot(train$PoolArea, geom="histogram",main = "Histograma de area en ft2 de piscina")
qplot(train$MiscVal, geom="histogram",main = "Histograma de cantidad de datos miscelaneoos")
qplot(train$YrSold, geom="histogram",main = "Histograma de años de venta")
qplot(train$SalePrice, geom="histogram",main = "Histograma de precios de venta")
-----------------ANALISIS DE CORRELACION DE VARIABLES
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
cor(cuantitativas)
##Correlation matrix
prueba <- na.omit(cuantitativas)
prueba <-   cor(prueba,method  ="pearson");
round (prueba, digits=2)
corrplot(prueba,tl.col = "black",tl.srt = 45)
corrplot(prueba, method ="shade",tl.col = "black",tl.srt = 45,order="AOE") ##ESTA ES LA QUE MEJOR SALE
barplot(table(train$MoSold))
barplot(table(train$MoSold),main = "Meses vs ventas")
barplot(table(train$Fence),main = "Cantidad segun calidad de cerca")
barplot(table(train$MoSold),main = "Cantidad por mes")
barplot(table(train$MSSubClass),main = "Cantidad por tipo de negocio")
barplot(table(train$MSZoning),main = "Cantidad por tipo de zona")
barplot(table(train$Street),main = "Cantidad por tipo de material de carretera de acceso  ")
barplot(table(train$Alley),main = "Cantidad por tipo de acceso")
barplot(table(train$MoSold),main = "Cantidad por mes")
barplot(table(train$MSSubClass),main = "Cantidad por tipo de negocio")
barplot(table(train$MSZoning),main = "Cantidad por tipo de zona")
barplot(table(train$Street),main = "Cantidad por tipo de material de carretera de acceso  ")
barplot(table(train$Alley),main = "Cantidad por tipo de acceso")
barplot(table(train$LotShape),main = "Cantidad segun forma del lote")
barplot(table(train$LandContour),main = "Cantidad segun tipo de terreno")
barplot(table(train$Utilities),main = "Cantidad segun tipo de utilidades")
barplot(table(train$LotConfig),main = "Cantidad segun configuracion del lote")
barplot(table(train$LandSlope),main = "Cantidad segun tipo de cuesta")
barplot(table(train$Neighborhood),main = "Cantidad segun tipo de vecindario")
barplot(table(train$Condition1),main = "Cantidad segun proximidad en condicion")
barplot(table(train$Condition2),main = "Cantidad segun proximidad")
barplot(table(train$BldgType),main = "Cantidad segun tipo de vivienda")
barplot(table(train$HouseStyle),main = "Cantidad segun tipo de casa")
barplot(table(train$OverallQual),main = "Cantidad segun calidad de la casa")
barplot(table(train$OverallCond),main = "Cantidad segun condicion de la casa")
barplot(table(train$RoofStyle),main = "Cantidad segun tipo de techo")
barplot(table(train$RoofMatl),main = "Cantidad segun tipo de material de tehco")
barplot(table(train$Exterior1st),main = "Cantidad segun cobertura exteriro de la vivienda")
barplot(table(train$Exterior2nd),main = "Cantidad segun segunda cobertuta exterior de la vivienda")
barplot(table(train$MasVnrType),main = "Cantidad segun masonry veneer")
barplot(table(train$Exterior1st),main = "Cantidad segun cobertura exterior de la vivienda")
barplot(table(train$Exterior2nd),main = "Cantidad segun segunda cobertuta exterior de la vivienda")
barplot(table(train$MasVnrType),main = "Cantidad segun masonry veneer")
barplot(table(train$ExterQual),main = "Cantidad segun calidad de materiales del exterior")
barplot(table(train$ExterCond),main = "Cantidad segun la condicion externa")
barplot(table(train$Foundation),main = "Cantidad segun el tipo de base")
barplot(table(train$BsmtQual),main = "Cantidad segun la altura del sotano")
barplot(table(train$BsmtCond),main = "Cantidad segun la condicion del sotan")
barplot(table(train$BsmtExposure),main = "Cantidad segun la exposicion del sotano")
barplot(table(train$BsmtFinType1m),main = "Cantidad segun rating de sotano")
barplot(table(train$BsmtExposure),main = "Cantidad segun la exposicion del sotano")
barplot(table(train$BsmtFinType1m),main = "Cantidad segun rating de sotano")
barplot(table(train$BsmtFinType1m),main = "Cantidad segun rating de sotano")
barplot(table(train$BsmtFinType1),main = "Cantidad segun rating de sotano")
barplot(table(train$BsmtFinType2),main = "Cantidad segun rating (si hay multiples)")
barplot(table(train$Heating),main = "Cantidad seugn tipo de calefaccion")
barplot(table(train$HeatingQC),main = "Cantidad segun calidad y condicion de calefaccion")
barplot(table(train$CentralAir),main = "Cantidad segun presencia de aire acondicionado ")
barplot(table(train$Electrical),main = "Cantidad segun sistemas electricos")
barplot(table(train$KitchenQual),main = "Cantidad segun calidad de cocina")
barplot(table(train$Functional),main = "Cantidad segun funcionalidades")
barplot(table(train$FireplaceQu) ,main = "Cantidad segun calidad de chimeneas")
barplot(table(train$GarageType),main = "Cantidad segun tipo (ubicaicon) de garajes")
barplot(table(train$GarageFinish),main = "Cantidad segun materiales de interior de garaje")
barplot(table(train$GarageQual),main = "Cantidad segun calidad del garaje" )
barplot(table(train$GarageCond), main = "Cantidad segun la condicion del garaje")
barplot(table(train$PavedDrive),main = "Cantidad segun pavimentacion o no de la calle")
barplot(table(train$PoolQC),main = "Cantidad segun calidad de piscina")
barplot(table(train$Fence),main = "Cantidad segun calidad de cerca")
barplot(table(train$MiscFeature),main = "Cantidad segun calidad de miscelanea no cubierta")
barplot(table(train$MoSold),main = "Cantidad segun mes de venta")
barplot(table(train$SaleType),main = "Cantidad segun tipo de venta")
barplot(table(train$SaleCondition),main = "Cantidad segun condicion de venta")
#Clusters
library(cluster) #Para calcular la silueta
#Clusters
library(cluster) #Para calcular la silueta
library(e1071)#para cmeans
library(mclust) #mixtures of gaussians
library(fpc) #para hacer el plotcluster
library(NbClust) #Para determinar el n�mero de clusters �ptimo
library(factoextra) #Para hacer gr�ficos bonitos de clustering
#Clustering jerárquico
hc<-hclust(dist(train[,1:78])) #Genera el clustering jerárquico de los datos
plot(hc) #Genera el dendograma
rect.hclust(hc,k=3)
groups<-cutree(hc,k=3)
datos$gruposHC<-groups
g1HC<-datos[datos$gruposHC==1,]
g2HC<-datos[datos$gruposHC==2,]
g3HC<-datos[datos$gruposHC==3,]
#Método de la silueta para clustering jerárquico
silch<-silhouette(groups,dist(train[,1:78]))
mean(silch[,3])
#Método de Ward para determinar el número correcto de clusteres con k-medias
#Para saber cual es el mejor numero de clusters
wss <- (nrow(train[,1:4])-1)*sum(apply(train[,1:78],2,var))
for (i in 2:10)
wss[i] <- sum(kmeans(train[,1:4], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
#Paquete para saber el mejor n�mero de clusters
nb <- NbClust(train[,1:4], distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
#Visualizaci�n de los clusters con factoextra
#Visualizaci�n de las k-medias
fviz_cluster(km, data = train[,1:78],geom = "point", ellipse.type = "norm")
#Visualizaci�n de cluster jer�rquico
hc.cut<-hcut(train[,1:78], k=3, hc_method = "complete")
fviz_dend(hc.cut, show_labels = FALSE, rect = TRUE)
fviz_cluster(hc.cut, ellipse.type = "convex")
install.packages("arules")
library(arules)
# El mínimo nivel de soporte y confianza aceptados
reglas<-apriori(datos, parameter = list(support = 0.2,
confidence = 0.70,
target = "rules"))
library(arules)
# El mínimo nivel de soporte y confianza aceptados
reglas<-apriori(train, parameter = list(support = 0.2,
confidence = 0.70,
target = "rules"))
#Reglas de asociacion
install.packages("arules")
install.packages("arules")
#Reglas de asociacion
install.packages("arules")
install.packages("arulesViz")
# El mínimo nivel de soporte y confianza aceptados
reglas<-apriori(train, parameter = list(support = 0.2,
confidence = 0.70,
target = "rules"))
apriori(train, parameter = list(support = 0.2,
confidence = 0.70,
target = "rules"))
library(arules)
# El mínimo nivel de soporte y confianza aceptados
reglas<- apriori(train, parameter = list(support = 0.2,
confidence = 0.70,
target = "rules"))
apriori(train, parameter = list(support = 0.2,
confidence = 0.70,
target = "rules"))
# El mínimo nivel de soporte y confianza aceptados
reglas<- apriori(prueba, parameter = list(support = 0.2,
confidence = 0.70,
target = "rules"))
gc()
qplot(train$PoolArea, geom="histogram",main = "Histograma de area en ft2 de piscina")
library(ggplot2)
library("psych")
library("ggplot2")
library("car")
library("Hmisc")
library("corrplot")
qplot(train$PoolArea, geom="histogram",main = "Histograma de area en ft2 de piscina")
